#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Sun Apr 2 10:00 2017
@author: Timo Hinzmann (hitimo@ethz.ch)
"""

def warn(*args, **kwargs):
    pass
import warnings
warnings.warn = warn

import numpy as np
from matplotlib import pyplot
import pylab
from mpl_toolkits.mplot3d import Axes3D
import copy
from numpy import linalg as LA
from scipy.spatial.distance import cdist
from sklearn.neighbors import NearestNeighbors
import cv2

knn = 1

def getNearestNeighbors(sourceT, targetT):
    nbrs = NearestNeighbors(n_neighbors=knn, algorithm='auto', radius=0.005).fit(targetT)

    rng = nbrs.radius_neighbors(sourceT, radius=1)
    rngArr = np.asarray(rng)

    mean_distances = []
    indices = []

    for point in range(rngArr.shape[1]):
        dist_array = rngArr[0,point]
        ind_array = rngArr[1,point]
        if dist_array != []:
            ind_min_dist = np.argmin(dist_array)
            indices.append(ind_array[ind_min_dist])
            mean_distances.append(dist_array[ind_min_dist])

    return indices, np.mean(mean_distances)

def computeBestTransformation(source, target, target_full):
    source_bar = np.mean(source, axis=0)
    target_bar = np.mean(target_full, axis=0)

    R_hat = computeBestRotation(source, source_bar, target, target_bar)
    t_hat = computeBestTranslation(source_bar, target_bar, R_hat)
    return getTransformationMatrix(R_hat, t_hat)

def getTransformationMatrix(R, t):
    T = np.eye(4)
    T[0:3,0:3] = R
    T[0:3,3] = t
    return T

def computeBestTranslation(source_bar, target_bar, R):
    t_opt = -np.dot(R, source_bar) + target_bar
    return t_opt

def computeBestRotation(source, source_bar, target, target_bar):
    # source_zeroed = source - source_bar;
    # target_zeroed = target - target_bar;
    # source_zeroed = source_zeroed.reshape((-1,3,1))
    sum = np.empty((3,3));

    for p in range(0, source.shape[0]):
        s_p = (source[p,:] - source_bar)
        # print(source[p,:])
        t_p = (target[p,:] - target_bar)
        dotted = s_p * t_p
        temp = np.sum(dotted, axis=0)
        sum += temp


    U, D, Vt = LA.svd(sum, compute_uv=True)

    R = np.dot(U.T, Vt)
    # R_z = np.diag([1,-1,-1])
    # R = np.dot(R_z,R)

    if np.linalg.det(R) < 0:
        R[:,2] = -R[:,2]

    # R -= np.outer(U.T[:, 2], V[2, :]*2.0)s
    return R

def make_plot(source, target):
    fig = pylab.figure()
    ax = Axes3D(fig)
    ax.scatter(source[0,:], source[1,:], source[2,:], color='red')
    ax.scatter(target[0,:], target[1,:], target[2,:], color='green')
    ax.view_init(azim=69, elev=-97)
    # pyplot.show(block=True)
    pyplot.cla()
    ax.scatter(source[0,:], source[1,:], source[2,:], color='red')
    ax.scatter(target[0,:], target[1,:], target[2,:], color='green')
    pyplot.draw()
    ax.view_init(azim=69, elev=-97)
    pyplot.show(block=True)

def do_transform(Tr, source2T):
    source2T = np.dot(Tr, source2T)

    return source2T


def main():
    source_original = np.genfromtxt(open("synthetic_source.xyz"))
    target_original = np.genfromtxt(open("synthetic_target.xyz"))
    source = np.ones((4, source_original.shape[0])).astype(np.float32)
    source_orig = source
    target = np.ones((4, target_original.shape[0])).astype(np.float32)
    # print(source_original.shape)
    source[0:3,:] = np.copy(source_original.T)
    target[0:3,:] = np.copy(target_original.T)

    # print(source)

    # Plotting.


    # Initialize.
    iter_max = 100
    convergence_tolerance = 1.0e-16
    previous_mean_error = 1.0e12
    T_final = np.eye(4)
    t_0 = np.asarray([0.2,0.3,0.1,1]).T
    T_final[:,3] = t_0
    source = np.dot(T_final, source)

    for iter in range(0, iter_max):
        if iter == iter_max - 1:
            make_plot(source, target)

        # Get correspondences.
        target_indices, current_mean_error = getNearestNeighbors(source[0:3,:].T, target[0:3,:].T)

        # Compute best transformation.
        T = computeBestTransformation(source[0:3,:].T,target[0:3,target_indices].T, target[0:3,:].T)

        # Save T_final
        T_final = np.dot(T_final, T)

        # Transform the source pointcloud.
        source = do_transform(T_final, source_orig)

        # Check convergence.
        if abs(previous_mean_error - current_mean_error) < convergence_tolerance:
            print "Converged at iteration: ", iter
            make_plot(source, target)
            break
        else:
            print('Mean error: ', current_mean_error)
            previous_mean_error = current_mean_error

        # Plotting.


    # T_final = np.dot(T, )
    # TODO
    # T_final = np.eye(4)

    print "Final transformation: ", T_final
    np.savetxt('results_alignment_synthetic.txt', T_final)

if __name__ == "__main__":
    main()
